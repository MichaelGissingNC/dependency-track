/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 */

"use strict";

function updateGauge(elmId, score) {
    $(elmId).html(toHtml(score));
    $(elmId + "Percent").data('easyPieChart').update(score * 10);
}

function populateVulnerabilityData(data) {
    let cvssBaseScore = (data.cvssV3BaseScore) ? data.cvssV3BaseScore : data.cvssV2BaseScore;
    let cvssImpactScore = (data.cvssV3ImpactSubScore) ? data.cvssV3ImpactSubScore : data.cvssV2ImpactSubScore;
    let cvssExploitScore = (data.cvssV3ExploitabilitySubScore) ? data.cvssV3ExploitabilitySubScore : data.cvssV2ExploitabilitySubScore;
    createRadarChart(cvssBaseScore, cvssImpactScore, cvssExploitScore);
    updateSeverity(cvssBaseScore);
    updateGauge("#cvssBaseScore", cvssBaseScore);
    updateGauge("#cvssImpactScore", cvssImpactScore);
    updateGauge("#cvssExploitScore", cvssExploitScore);

    if (data.cvssV3Vector) {
        $(".cvssv3VectorRow").css("display", "table-row");
        $("#cvssV3Vector").html(filterXSS(data.cvssV3Vector));
    }
    if (data.cvssV2Vector) {
        $(".cvssv2VectorRow").css("display", "table-row");
        $("#cvssV2Vector").html(filterXSS(data.cvssV2Vector));
    }

    let source = "National Vulnerability Database";
    if (data.source === "NVD") {
        $("#vulnSourceUrl").attr("href", "https://nvd.nist.gov/vuln/detail/" + filterXSS(data.vulnId));
    } else if (data.source === "NSP") {
        source = "Node Security Platform";
        $("#vulnSourceUrl").attr("href", "https://nodesecurity.io/advisories/" + filterXSS(data.vulnId));
    }
    $("#vulnSourceUrl").html(filterXSS(data.vulnId));

    $(".vuln-source").html(filterXSS(source));
    $("#vulnId").html(filterXSS(data.vulnId));

    // Initialize the markdown to html converter with optional XSS filter extension enabled
    let converter = new showdown.Converter({ extensions: ['xssfilter'] });

    if (data.description) {
        $("#vulndata").append(contentTemplate("Overview", "description", converter.makeHtml(data.description)));
    }
    if (data.cwe) {
        let anchor = '<a href="http://cwe.mitre.org/data/definitions/' + toHtml(data.cwe.cweId) + '">' +
            toHtml("CWE-" + data.cwe.cweId + " : " + data.cwe.name) + '</a>';
        $("#vulndata").append(contentTemplate("Classification", "cwe", anchor));
    }
    if (data.recommendation) {
        $("#vulndata").append(contentTemplate("Recommendation", "recommendation", converter.makeHtml(data.recommendation)));
    }
    if (data.references) {
        $("#vulndata").append(contentTemplate("References", "references", converter.makeHtml(data.references)));
    }
    if (data.credits) {
        $("#vulndata").append(contentTemplate("Credits", "credits", converter.makeHtml(data.credits)));
    }
}

function contentTemplate(heading, id, content) {
    return `<h3 style="margin-top:50px;">${heading}</h3><p id="${id}">${content}</p>`;
}

function updateSeverity(cvssBaseScore) {
    let value = $(".severity-value");
    let color = $(".severity-color");
    switch (true) {
        case cvssBaseScore >= 9:
            value.html("Critical Severity");
            color.addClass("severity-critical-bg");
            break;
        case cvssBaseScore >= 7:
            value.html("High Severity");
            color.addClass("severity-high-bg");
            break;
        case cvssBaseScore >= 4:
            value.html("Medium Severity");
            color.addClass("severity-medium-bg");
            break;
        case cvssBaseScore > 0:
            value.html("Low Severity");
            color.addClass("severity-low-bg");
            break;
        default:
            value.html("Informational Only");
            color.addClass("severity-info-bg");
    }
}

function createRadarChart(base, impact, exploit) {
    let data = [
        {
            axes: [
                {axis: "Base Score", value: base},
                {axis: "Impact", value: impact},
                {axis: "Exploitability", value: exploit}
            ]
        }
    ];

    let chart = RadarChart.chart();
    RadarChart.defaultConfig.radius = 3;
    RadarChart.defaultConfig.w = 400;
    RadarChart.defaultConfig.h = 350;
    RadarChart.defaultConfig.minValue = 0;
    RadarChart.defaultConfig.maxValue = 10;
    RadarChart.defaultConfig.levels = 5;
    RadarChart.draw(".radar-chart-container", data);
}

function vulnNotFound() {
    $(".vuln-source").html("Unknown");
    $("#vulnId").html("Vulnerability Not Found");
    createRadarChart(0, 0, 0);
    updateGauge("#cvssBaseScore", "N/A");
    updateGauge("#cvssImpactScore", "N/A");
    updateGauge("#cvssExploitScore", "N/A");
    updateSeverity(0);
}

function formatProjectsTable(res) {
    for (let i=0; i<res.length; i++) {
        let projecturl = "../project/?uuid=" + res[i].uuid;
        res[i].projecthref = "<a href=\"" + projecturl + "\">" + res[i].name + "</a>";
    }
    return res;
}

/**
 * Setup events and trigger other stuff when the page is loaded and ready.
 */
$(document).ready(function () {
    let uuid = $.getUrlVar("uuid");
    let source = $.getUrlVar("source");
    let vulnId = $.getUrlVar("vulnId");
    if (uuid) {
        $rest.getVulnerabilityByUuid(uuid, populateVulnerabilityData, vulnNotFound);
    } else {
        $rest.getVulnerabilityByVulnId(source, vulnId, populateVulnerabilityData, vulnNotFound);
    }

    // Initialize and create the charts
    $('.chart').easyPieChart({
        barColor: "#3D598B",
        trackColor: "#f2f2f2",
        scaleColor: "#dfe0e0",
        scaleLength: 5,
        lineCap: "butt",
        lineWidth: 5,
        size: 90,
    });
});