/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 */
package org.owasp.dependencytrack.model;

import alpine.validation.RegexSequence;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.FetchGroup;
import javax.jdo.annotations.FetchGroups;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.Index;
import javax.jdo.annotations.Order;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.jdo.annotations.Unique;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Model for tracking vulnerabilities.
 *
 * @author Steve Springett
 * @since 3.0.0
 */
@PersistenceCapable
@FetchGroups({
        @FetchGroup(name = "COMPONENTS", members = {
                @Persistent(name = "components")
        })
})
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = -3002699553847728904L;

    /**
     * Defines the JDO fetch groups for this class.
     */
    public enum FetchGroup {
        COMPONENTS
    }

    /**
     * Defines the sources of vulnerability data supported by Dependency-Track.
     */
    public enum Source {
        NVD,    // National Vulnerability Database
        NSP,    // Node Security Platform
        VULNDB, // VulnDB from Risk Based Security
        MANUAL  // Manually entered vulnerability
    }

    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.NATIVE)
    @JsonIgnore
    private long id;

    @Persistent
    @Column(name = "VULNID", allowsNull = "false")
    @Index(name = "VULNERABILITY_VULNID_IDX")
    @NotNull
    @Size(min = 1, max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The vulnerability ID may only contain printable characters")
    private String vulnId;

    @Persistent
    @Column(name = "SOURCE", allowsNull = "false")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The source may only contain printable characters")
    private String source;

    @Persistent
    @Column(name = "TITLE")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The title may only contain printable characters")
    private String title;

    @Persistent
    @Column(name = "SUBTITLE")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The subtitle may only contain printable characters")
    private String subTitle;

    @Persistent
    @Column(name = "DESCRIPTION", jdbcType = "CLOB")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The description may only contain printable characters")
    private String description;

    @Persistent
    @Column(name = "RECOMMENDATION", jdbcType = "CLOB")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The recommendation may only contain printable characters")
    private String recommendation;

    @Persistent
    @Column(name = "REFERENCES", jdbcType = "CLOB")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The references may only contain printable characters")
    private String references;

    @Persistent
    @Column(name = "CREDITS")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The credits may only contain printable characters")
    private String credits;

    @Persistent
    @Column(name = "CREATED", jdbcType = "TIMESTAMP")
    private Date created;

    @Persistent
    @Column(name = "PUBLISHED", jdbcType = "TIMESTAMP")
    private Date published;

    @Persistent
    @Column(name = "UPDATED", jdbcType = "TIMESTAMP")
    private Date updated;

    @Persistent(defaultFetchGroup = "true")
    @Column(name = "CWE")
    @Index(name = "VULNERABILITY_CWE_IDX")
    private Cwe cwe;

    @Persistent
    @Column(name = "CVSSV2BASESCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV2BaseScore;

    @Persistent
    @Column(name = "CVSSV2IMPACTSCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV2ImpactSubScore;

    @Persistent
    @Column(name = "CVSSV2EXPLOITSCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV2ExploitabilitySubScore;

    @Persistent
    @Column(name = "CVSSV2VECTOR")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The CVSSv2 Vector may only contain printable characters")
    private String cvssV2Vector;

    @Persistent
    @Column(name = "CVSSV3BASESCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV3BaseScore;

    @Persistent
    @Column(name = "CVSSV3IMPACTSCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV3ImpactSubScore;

    @Persistent
    @Column(name = "CVSSV3EXPLOITSCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV3ExploitabilitySubScore;

    @Persistent
    @Column(name = "CVSSV3VECTOR")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The CVSSv3 Vector may only contain printable characters")
    private String cvssV3Vector;

    @Persistent
    @Column(name = "MATCHEDCPE")
    @Size(max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The matchedCPE may only contain printable characters")
    private String matchedCPE;

    @Persistent
    @Column(name = "MATCHEDALLPREVIOUSCPE")
    @Size(max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The matchedAllPreviousCPE may only contain printable characters")
    private String matchedAllPreviousCPE;

    @Persistent
    @Column(name = "VULNERABLEVERSIONS")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The vulnerable versions may only contain printable characters")
    private String vulnerableVersions;

    @Persistent
    @Column(name = "PATCHEDVERSIONS")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The patched versions may only contain printable characters")
    private String patchedVersions;

    @Persistent(mappedBy = "vulnerabilities")
    @Order(extensions = @Extension(vendorName = "datanucleus", key = "list-ordering", value = "id ASC"))
    private List<Component> components;

    @Persistent(customValueStrategy = "uuid")
    @Unique(name = "VULNERABILITY_UUID_IDX")
    @Column(name = "UUID", jdbcType = "VARCHAR", length = 36, allowsNull = "false")
    @NotNull
    private UUID uuid;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * Returns the severity based on the numerical CVSS score. CVSSv2 and CVSSv3 have
     * slightly different ranges with CVSSv3 introducing critical severity whereas
     * CVSSv2 only has high, medium, and low.
     *
     * This method properly accounts for vulnerabilities that may have only a CVSSv2
     * score. If both scores are available, it will return the CVSSv3 severity.
     * @return the severity of the vulnerability
     */
    public Severity getSeverity() {
        final double dv;
        if (cvssV3BaseScore != null) {
            dv = cvssV3BaseScore.doubleValue();
        } else if (cvssV2BaseScore != null) {
            dv = cvssV2BaseScore.doubleValue();
        } else {
            return Severity.UNASSIGNED;
        }
        if (dv >= 9 && cvssV3BaseScore != null) {
            return Severity.CRITICAL;
        } else if (dv >= 7) {
            return Severity.HIGH;
        } else if (dv >= 4) {
            return Severity.MEDIUM;
        } else if (dv > 0) {
            return Severity.LOW;
        } else {
            return Severity.INFO;
        }
    }

    public String getVulnId() {
        return vulnId;
    }

    public void setVulnId(String vulnId) {
        this.vulnId = vulnId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getRecommendation() {
        return recommendation;
    }

    public void setRecommendation(String recommendation) {
        this.recommendation = recommendation;
    }

    public String getReferences() {
        return references;
    }

    public void setReferences(String references) {
        this.references = references;
    }

    public String getCredits() {
        return credits;
    }

    public void setCredits(String credits) {
        this.credits = credits;
    }

    public Date getCreated() {
        return created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    public Date getPublished() {
        return published;
    }

    public void setPublished(Date published) {
        this.published = published;
    }

    public Date getUpdated() {
        return updated;
    }

    public void setUpdated(Date updated) {
        this.updated = updated;
    }

    public String getVulnerableVersions() {
        return vulnerableVersions;
    }

    public void setVulnerableVersions(String vulnerableVersions) {
        this.vulnerableVersions = vulnerableVersions;
    }

    public String getPatchedVersions() {
        return patchedVersions;
    }

    public void setPatchedVersions(String patchedVersions) {
        this.patchedVersions = patchedVersions;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public void setSource(Source source) {
        this.source = source.name();
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getSubTitle() {
        return subTitle;
    }

    public void setSubTitle(String subTitle) {
        this.subTitle = subTitle;
    }

    public Cwe getCwe() {
        return cwe;
    }

    public void setCwe(Cwe cwe) {
        this.cwe = cwe;
    }

    public BigDecimal getCvssV2BaseScore() {
        return cvssV2BaseScore;
    }

    public void setCvssV2BaseScore(BigDecimal cvssV2BaseScore) {
        this.cvssV2BaseScore = cvssV2BaseScore;
    }

    public BigDecimal getCvssV2ImpactSubScore() {
        return cvssV2ImpactSubScore;
    }

    public void setCvssV2ImpactSubScore(BigDecimal cvssV2ImpactSubScore) {
        this.cvssV2ImpactSubScore = cvssV2ImpactSubScore;
    }

    public BigDecimal getCvssV2ExploitabilitySubScore() {
        return cvssV2ExploitabilitySubScore;
    }

    public void setCvssV2ExploitabilitySubScore(BigDecimal cvssV2ExploitabilitySubScore) {
        this.cvssV2ExploitabilitySubScore = cvssV2ExploitabilitySubScore;
    }

    public String getCvssV2Vector() {
        return cvssV2Vector;
    }

    public void setCvssV2Vector(String cvssV2Vector) {
        this.cvssV2Vector = cvssV2Vector;
    }

    public BigDecimal getCvssV3BaseScore() {
        return cvssV3BaseScore;
    }

    public void setCvssV3BaseScore(BigDecimal cvssV3BaseScore) {
        this.cvssV3BaseScore = cvssV3BaseScore;
    }

    public BigDecimal getCvssV3ImpactSubScore() {
        return cvssV3ImpactSubScore;
    }

    public void setCvssV3ImpactSubScore(BigDecimal cvssV3ImpactSubScore) {
        this.cvssV3ImpactSubScore = cvssV3ImpactSubScore;
    }

    public BigDecimal getCvssV3ExploitabilitySubScore() {
        return cvssV3ExploitabilitySubScore;
    }

    public void setCvssV3ExploitabilitySubScore(BigDecimal cvssV3ExploitabilitySubScore) {
        this.cvssV3ExploitabilitySubScore = cvssV3ExploitabilitySubScore;
    }

    public String getCvssV3Vector() {
        return cvssV3Vector;
    }

    public void setCvssV3Vector(String cvssV3Vector) {
        this.cvssV3Vector = cvssV3Vector;
    }

    public String getMatchedCPE() {
        return matchedCPE;
    }

    public void setMatchedCPE(String matchedCPE) {
        this.matchedCPE = matchedCPE;
    }

    public String getMatchedAllPreviousCPE() {
        return matchedAllPreviousCPE;
    }

    public void setMatchedAllPreviousCPE(String matchedAllPreviousCPE) {
        this.matchedAllPreviousCPE = matchedAllPreviousCPE;
    }

    public List<Component> getComponents() {
        return components;
    }

    public void setComponents(List<Component> components) {
        this.components = components;
    }

    public UUID getUuid() {
        return uuid;
    }

    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

}
